#pragma clang diagnostic push
#pragma ide diagnostic ignored "hicpp-signed-bitwise"
#pragma ide diagnostic ignored "cppcoreguidelines-avoid-magic-numbers"

#include "jni_utils.h"

#include <opencv2/imgproc.hpp>


// this is COLORMAP_VIRIDIS but for RGB, not BGR,
// so that we don't have to call cvtColor to convert it
// I got the values from here:
// https://github.com/opencv/opencv/blob/master/modules/imgproc/src/colormap.cpp
// and I converted them from float to signed byte
//using V = cv::Vec3b;
#define V(a, b, c) a, b, c

constexpr std::array<uchar, 256*3> colors {
        V( 68,   1,  84), V( 68,   2,  86), V( 69,   4,  87), V( 69,   5,  89),
        V( 70,   7,  90), V( 70,   8,  92), V( 70,  10,  93), V( 70,  11,  94),
        V( 71,  13,  96), V( 71,  14,  97), V( 71,  16,  99), V( 71,  17, 100),
        V( 71,  19, 101), V( 72,  20, 103), V( 72,  22, 104), V( 72,  23, 105),
        V( 72,  24, 106), V( 72,  26, 108), V( 72,  27, 109), V( 72,  28, 110),
        V( 72,  29, 111), V( 72,  31, 112), V( 72,  32, 113), V( 72,  33, 115),
        V( 72,  35, 116), V( 72,  36, 117), V( 72,  37, 118), V( 72,  38, 119),
        V( 72,  40, 120), V( 72,  41, 121), V( 71,  42, 122), V( 71,  44, 122),
        V( 71,  45, 123), V( 71,  46, 124), V( 71,  47, 125), V( 70,  48, 126),
        V( 70,  50, 126), V( 70,  51, 127), V( 70,  52, 128), V( 69,  53, 129),
        V( 69,  55, 129), V( 69,  56, 130), V( 68,  57, 131), V( 68,  58, 131),
        V( 68,  59, 132), V( 67,  61, 132), V( 67,  62, 133), V( 66,  63, 133),
        V( 66,  64, 134), V( 66,  65, 134), V( 65,  66, 135), V( 65,  68, 135),
        V( 64,  69, 136), V( 64,  70, 136), V( 63,  71, 136), V( 63,  72, 137),
        V( 62,  73, 137), V( 62,  74, 137), V( 62,  76, 138), V( 61,  77, 138),
        V( 61,  78, 138), V( 60,  79, 138), V( 60,  80, 139), V( 59,  81, 139),
        V( 59,  82, 139), V( 58,  83, 139), V( 58,  84, 140), V( 57,  85, 140),
        V( 57,  86, 140), V( 56,  88, 140), V( 56,  89, 140), V( 55,  90, 140),
        V( 55,  91, 141), V( 54,  92, 141), V( 54,  93, 141), V( 53,  94, 141),
        V( 53,  95, 141), V( 52,  96, 141), V( 52,  97, 141), V( 51,  98, 141),
        V( 51,  99, 141), V( 50, 100, 142), V( 50, 101, 142), V( 49, 102, 142),
        V( 49, 103, 142), V( 49, 104, 142), V( 48, 105, 142), V( 48, 106, 142),
        V( 47, 107, 142), V( 47, 108, 142), V( 46, 109, 142), V( 46, 110, 142),
        V( 46, 111, 142), V( 45, 112, 142), V( 45, 113, 142), V( 44, 113, 142),
        V( 44, 114, 142), V( 44, 115, 142), V( 43, 116, 142), V( 43, 117, 142),
        V( 42, 118, 142), V( 42, 119, 142), V( 42, 120, 142), V( 41, 121, 142),
        V( 41, 122, 142), V( 41, 123, 142), V( 40, 124, 142), V( 40, 125, 142),
        V( 39, 126, 142), V( 39, 127, 142), V( 39, 128, 142), V( 38, 129, 142),
        V( 38, 130, 142), V( 38, 130, 142), V( 37, 131, 142), V( 37, 132, 142),
        V( 37, 133, 142), V( 36, 134, 142), V( 36, 135, 142), V( 35, 136, 142),
        V( 35, 137, 142), V( 35, 138, 141), V( 34, 139, 141), V( 34, 140, 141),
        V( 34, 141, 141), V( 33, 142, 141), V( 33, 143, 141), V( 33, 144, 141),
        V( 33, 145, 140), V( 32, 146, 140), V( 32, 146, 140), V( 32, 147, 140),
        V( 31, 148, 140), V( 31, 149, 139), V( 31, 150, 139), V( 31, 151, 139),
        V( 31, 152, 139), V( 31, 153, 138), V( 31, 154, 138), V( 30, 155, 138),
        V( 30, 156, 137), V( 30, 157, 137), V( 31, 158, 137), V( 31, 159, 136),
        V( 31, 160, 136), V( 31, 161, 136), V( 31, 161, 135), V( 31, 162, 135),
        V( 32, 163, 134), V( 32, 164, 134), V( 33, 165, 133), V( 33, 166, 133),
        V( 34, 167, 133), V( 34, 168, 132), V( 35, 169, 131), V( 36, 170, 131),
        V( 37, 171, 130), V( 37, 172, 130), V( 38, 173, 129), V( 39, 173, 129),
        V( 40, 174, 128), V( 41, 175, 127), V( 42, 176, 127), V( 44, 177, 126),
        V( 45, 178, 125), V( 46, 179, 124), V( 47, 180, 124), V( 49, 181, 123),
        V( 50, 182, 122), V( 52, 182, 121), V( 53, 183, 121), V( 55, 184, 120),
        V( 56, 185, 119), V( 58, 186, 118), V( 59, 187, 117), V( 61, 188, 116),
        V( 63, 188, 115), V( 64, 189, 114), V( 66, 190, 113), V( 68, 191, 112),
        V( 70, 192, 111), V( 72, 193, 110), V( 74, 193, 109), V( 76, 194, 108),
        V( 78, 195, 107), V( 80, 196, 106), V( 82, 197, 105), V( 84, 197, 104),
        V( 86, 198, 103), V( 88, 199, 101), V( 90, 200, 100), V( 92, 200,  99),
        V( 94, 201,  98), V( 96, 202,  96), V( 99, 203,  95), V(101, 203,  94),
        V(103, 204,  92), V(105, 205,  91), V(108, 205,  90), V(110, 206,  88),
        V(112, 207,  87), V(115, 208,  86), V(117, 208,  84), V(119, 209,  83),
        V(122, 209,  81), V(124, 210,  80), V(127, 211,  78), V(129, 211,  77),
        V(132, 212,  75), V(134, 213,  73), V(137, 213,  72), V(139, 214,  70),
        V(142, 214,  69), V(144, 215,  67), V(147, 215,  65), V(149, 216,  64),
        V(152, 216,  62), V(155, 217,  60), V(157, 217,  59), V(160, 218,  57),
        V(162, 218,  55), V(165, 219,  54), V(168, 219,  52), V(170, 220,  50),
        V(173, 220,  48), V(176, 221,  47), V(178, 221,  45), V(181, 222,  43),
        V(184, 222,  41), V(186, 222,  40), V(189, 223,  38), V(192, 223,  37),
        V(194, 223,  35), V(197, 224,  33), V(200, 224,  32), V(202, 225,  31),
        V(205, 225,  29), V(208, 225,  28), V(210, 226,  27), V(213, 226,  26),
        V(216, 226,  25), V(218, 227,  25), V(221, 227,  24), V(223, 227,  24),
        V(226, 228,  24), V(229, 228,  25), V(231, 228,  25), V(234, 229,  26),
        V(236, 229,  27), V(239, 229,  28), V(241, 229,  29), V(244, 230,  30),
        V(246, 230,  32), V(248, 230,  33), V(251, 231,  35), V(253, 231,  37),
};

const cv::Mat& getColorMap() {
    static cv::Mat cm(256, 1, CV_8UC3, (void*) colors.data());
    return cm;
}

JNIFUN(void, colorMapAndNormalize)(JNIEnv* env, jobject,
        jlong srcAddr, jlong dstAddr) {
    const auto& src = addrToMat(srcAddr);
    auto& dst = addrToMat(dstAddr);
    try {
        cv::normalize(src, dst, 0.0, 255.0, cv::NORM_MINMAX);
        cv::applyColorMap(dst, dst, getColorMap());
    } catch (std::exception& e) {
        JNI_THROW(env, e.what());
    }
}
JNIFUN(void, morphologicalSkeleton)(JNIEnv* env, jobject, jlong srcAddr, jlong dstAddr) {
    cv::Mat src = addrToMat(srcAddr);
    auto& dst = addrToMat(dstAddr);
    try {
        constexpr int kerSize = 3;
        cv::Mat eroded;
        cv::Mat ker = cv::getStructuringElement(cv::MORPH_CROSS, cv::Size(kerSize, kerSize));
        cv::Mat temp(src.size(), CV_8U);
        // We must have a 'res' variable since dst can be (and often is) the same as dst
        cv::Mat res = cv::Mat(src.size(), CV_8U, cv::Scalar(0.0));
        do {
            cv::erode(src, eroded, ker);
            cv::dilate(eroded, temp, ker);
            cv::subtract(src, temp, temp);
            cv::bitwise_or(res, temp, res);

            eroded.copyTo(src);
        } while (countNonZero(src) != 0);
        res.copyTo(dst);
    } catch (std::exception& e) {
        JNI_THROW(env, e.what());
    }
}
#pragma clang diagnostic pop
